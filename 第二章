2.1 基本数据类型
  变量(Variable)是一个数据存储空间的表示
  基本数据类型在内存种存入的是数据值本身，引用数据类型在内存中存入的是指向该数据的地址，对引用数据类型的应用成为对象引用
  8种基本数据类型：byte short long int float double boolean char
    整数型：byte short long int
    浮点型：float double
    字符型：char
    布尔型：boolean
    
  机器数：一个数在计算机中的二进制表示形式,  叫做这个数的机器数。机器数是带符号的，在计算机用一个数的最高位存放符号, 正数为0, 负数为1。
  真值：将带符号位的机器数对应的真正数值称为机器数的真值。
  原码：原码就是符号位加上真值的绝对值。
  反码：正数的反码是其本身；负数的反码是在其原码的基础上, 符号位不变，其余各个位取反。
  补码：正数的补码就是其本身；负数的补码是在其原码的基础上, 符号位不变, 其余各位取反, 最后+1.。(即在反码的基础上+1)
  
    byte 数据类型是8位、有符号的，以二进制补码表示的整数；
    包装类：java.lang.Byte
    最小值是 -128（-2^7）；
    最大值是 127（2^7-1）；
    默认值是 0；
    byte 类型用在大型数组中节约空间，主要代替整数，因为 byte 变量占用的空间只有 int 类型的四分之一；
    例子：byte a = 100，byte b = -50。
    
    short 数据类型是 16 位、有符号的以二进制补码表示的整数
    包装类：java.lang.Short
    最小值是 -32768（-2^15）；
    最大值是 32767（2^15 - 1）；
    short 数据类型也可以像 byte 那样节省空间。一个short变量是int型变量所占空间的二分之一；
    默认值是 0；
    例子：short s = 1000，short r = -20000。
    
    int 数据类型是32位、有符号的以二进制补码表示的整数；
    包装类：java.lang.Integer
    最小值是 -2,147,483,648（-2^31）；
    最大值是 2,147,483,647（2^31 - 1）；
    一般地整型变量默认为 int 类型；
    默认值是 0 ；
    例子：int a = 100000, int b = -200000。
    
    long 数据类型是 64 位、有符号的以二进制补码表示的整数；
    包装类：java.lang.Long
    最小值是 -9,223,372,036,854,775,808（-2^63）；
    最大值是 9,223,372,036,854,775,807（2^63 -1）；
    这种类型主要使用在需要比较大整数的系统上；
    默认值是 0L；
    例子： long a = 100000L，Long b = -200000L。
    "L"理论上不分大小写，但是若写成"l"容易与数字"1"混淆，不容易分辩。所以最好大写。
    
    float 数据类型是单精度、32位、符合IEEE 754标准的浮点数；
    包装类：java.lang.Float
    最小值：Float.MIN_VALUE=1.4E-45
    最大值：Float.MAX_VALUE=3.4028235E38
    float 在储存大型浮点数组的时候可节省内存空间；
    默认值是 0.0f；
    浮点数不能用来表示精确的值，如货币；
    例子：float f1 = 234.5f。
    
    double 数据类型是双精度、64 位、符合IEEE 754标准的浮点数；
    包装类：java.lang.Double
    最小值：Double.MIN_VALUE=4.9E-324
     最大值：Double.MAX_VALUE=1.7976931348623157E308
    浮点数的默认类型为double类型；
    double类型同样不能表示精确的值，如货币；
    默认值是 0.0d；
    例子：double d1 = 123.4。

    boolean数据类型表示一位的信息；
    只有两个取值：true 和 false；
    这种类型只作为一种标志来记录 true/false 情况；
    默认值是 false；
    例子：boolean one = true。
    
    char类型是一个单一的 16 位 Unicode 字符；
    包装类：java.lang.Character
    最小值是 \u0000（即为0）；
    最大值是 \uffff（即为65,535）；
    char 数据类型可以储存任何字符；
    例子：char letter = 'A';。
    
  引用类型：数组、类、接口
2.2 基本数据类型应用示例
2.3 表达式和运算符
2.4 程序控制语句
