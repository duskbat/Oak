package arraypractice;

import java.util.Arrays;

public class ErWeiShuZu {
    /**
     * 在一个二维数组中（每个一维数组的长度相同），
     * 每一行都按照从左到右递增的顺序排序，
     * 每一列都按照从上到下递增的顺序排序。
     * 请完成一个函数，输入这样的一个二维数组和一个整数，判断数组中是否含有该整数。
     */

    /**
     * 双层二分查找
     */
    public boolean Find(int target, int[][] array) {
        boolean isFound = false;
        int row = array.length;
        int col = array[0].length;
        if (target < array[0][0] || target > array[row][col]) {
            isFound = false;
        }


        return isFound;
    }

    //二分查找
    public static int binnarySearch(int[] array, int key) {
        int state = 0;
        int low = 0;
        int high = array.length - 1;
        int half = 0;
        if (key < array[0] || key > array[high]) {
            state = -1;
        }
        while (low <= high) {
            half = (low + high) / 2;
            if (array[half] > key) {
                high = half - 1;
            } else if (array[half] < key) {
                low = half + 1;
            } else if (array[half] == key) {
                state = half;
                break;
            }
        }
        state = -1;

        return state;

    }
//    public boolean Find(int target, int[][] array) {
//        for (int i = 0; i < array.length; i++) {
//            for (int j = 0; j < array[i].length; j++) {
//                if (target == array[i][j])
//                    return true;
//            }
//        }
//        return false;
//    }

    public static void main(String[] args) {
        int[] arr = {1,3,5,7,9,11};
        int key = 4;
        //int position = recursionBinarySearch(arr,key,0,arr.length - 1);

        int position = binnarySearch(arr, key);

        if(position == -1){
            System.out.println("查找的是"+key+",序列中没有该数！");
        }else{
            System.out.println("查找的是"+key+",找到位置为："+position);
        }


    }


}
